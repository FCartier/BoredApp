{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\nexport const fetchActivities = createAsyncThunk(\"dashboard/fetchActivities\", async page => {\n  const response = await get(`list/${page * 10}`);\n  return response;\n});\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  incrementByAmount\n} = dashboardSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectActivities = state => state.dashboard.activities;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","createAsyncThunk","get","StatusEnum","idle","loading","succeeded","failed","fetchActivities","page","response","dashboardSlice","name","initialState","activities","status","error","reducers","incrementByAmount","state","action","value","payload","extraReducers","pending","fulfilled","concat","rejected","message","actions","selectActivities","dashboard","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,OAAO,EAAE,SAFQ;AAGjBC,EAAAA,SAAS,EAAE,WAHM;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB;AAOA,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAC7C,2BAD6C,EAE7C,MAAMQ,IAAN,IAAc;AACZ,QAAMC,QAAQ,GAAG,MAAMR,GAAG,CAAE,QAAOO,IAAI,GAAG,EAAG,EAAnB,CAA1B;AACA,SAAOC,QAAP;AACD,CAL4C,CAAxC;AAQP,OAAO,MAAMC,cAAc,GAAGX,WAAW,CAAC;AACxCY,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,MAAM,EAAEZ,UAAU,CAACC,IAFP;AAGZY,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACE,KAAN,IAAeD,MAAM,CAACE,OAAtB;AACD;AAHO,GAP8B;AAYxCC,EAAAA,aAAa,EAAE;AACb,KAACf,eAAe,CAACgB,OAAjB,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACP,eAAe,CAACiB,SAAjB,GAA6B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACL,UAAN,GAAmBK,KAAK,CAACL,UAAN,CAAiBY,MAAjB,CAAwBN,MAAM,CAACE,OAA/B,CAAnB;AACD,KAPY;AAQb,KAACd,eAAe,CAACmB,QAAjB,GAA4B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAaY,OAA3B;AACD;AAXY;AAZyB,CAAD,CAAlC;AA2BP,OAAO,MAAM;AAAEV,EAAAA;AAAF,IAAwBP,cAAc,CAACkB,OAA7C,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGX,KAAK,IAAIA,KAAK,CAACY,SAAN,CAAgBjB,UAAlD;AAEP,eAAeH,cAAc,CAACqB,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\n\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\n\nexport const fetchActivities = createAsyncThunk(\n  \"dashboard/fetchActivities\",\n  async page => {\n    const response = await get(`list/${page * 10}`);\n    return response;\n  }\n);\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\n\nexport const { incrementByAmount } = dashboardSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectActivities = state => state.dashboard.activities;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}