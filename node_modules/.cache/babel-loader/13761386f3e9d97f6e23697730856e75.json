{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { activitiesData } from \"./dashboardData\";\nimport { get } from \"../../api/client\";\nconst StatusEnum = [\"idle\", \"loading\", \"succeeded\", \"failed\"];\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    updateActivities: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activities = activitiesData;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  updateActivities,\n  incrementByAmount\n} = dashboardSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const fetchActivities = createAsyncThunk(\"dashboard/fetchActivities\", async () => {\n  const response = await get(\"list/10\");\n  return response;\n}); // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectActivities = state => state.dashboard.activities;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","createAsyncThunk","activitiesData","get","StatusEnum","dashboardSlice","name","initialState","activities","status","idle","error","reducers","updateActivities","state","incrementByAmount","action","value","payload","extraReducers","fetchActivities","pending","fulfilled","concat","rejected","message","actions","response","selectActivities","dashboard","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA,MAAMC,UAAU,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,WAApB,EAAiC,QAAjC,CAAnB;AAEA,OAAO,MAAMC,cAAc,GAAGL,WAAW,CAAC;AACxCM,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,MAAM,EAAEL,UAAU,CAACM,IAFP;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAEC,KAAK,IAAI;AACzB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACN,UAAN,GAAmBN,cAAnB;AACD,KAPO;AAQRa,IAAAA,iBAAiB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACG,KAAN,IAAeD,MAAM,CAACE,OAAtB;AACD;AAVO,GAP8B;AAmBxCC,EAAAA,aAAa,EAAE;AACb,KAACC,eAAe,CAACC,OAAjB,GAA2B,CAACP,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACW,eAAe,CAACE,SAAjB,GAA6B,CAACR,KAAD,EAAQE,MAAR,KAAmB;AAC9CF,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACN,UAAN,GAAmBM,KAAK,CAACN,UAAN,CAAiBe,MAAjB,CAAwBP,MAAM,CAACE,OAA/B,CAAnB;AACD,KAPY;AAQb,KAACE,eAAe,CAACI,QAAjB,GAA4B,CAACV,KAAD,EAAQE,MAAR,KAAmB;AAC7CF,MAAAA,KAAK,CAACL,MAAN,GAAe,QAAf;AACAK,MAAAA,KAAK,CAACH,KAAN,GAAcK,MAAM,CAACL,KAAP,CAAac,OAA3B;AACD;AAXY;AAnByB,CAAD,CAAlC;AAkCP,OAAO,MAAM;AAAEZ,EAAAA,gBAAF;AAAoBE,EAAAA;AAApB,IAA0CV,cAAc,CAACqB,OAA/D,C,CAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMN,eAAe,GAAGnB,gBAAgB,CAC7C,2BAD6C,EAE7C,YAAY;AACV,QAAM0B,QAAQ,GAAG,MAAMxB,GAAG,CAAC,SAAD,CAA1B;AAEA,SAAOwB,QAAP;AACD,CAN4C,CAAxC,C,CASP;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGd,KAAK,IAAIA,KAAK,CAACe,SAAN,CAAgBrB,UAAlD;AAEP,eAAeH,cAAc,CAACyB,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport { activitiesData } from \"./dashboardData\";\nimport { get } from \"../../api/client\";\n\nconst StatusEnum = [\"idle\", \"loading\", \"succeeded\", \"failed\"];\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    updateActivities: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activities = activitiesData;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\n\nexport const { updateActivities, incrementByAmount } = dashboardSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const fetchActivities = createAsyncThunk(\n  \"dashboard/fetchActivities\",\n  async () => {\n    const response = await get(\"list/10\");\n\n    return response;\n  }\n);\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectActivities = state => state.dashboard.activities;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}