{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { activitiesData } from \"./dashboardData\";\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    fetchActivities: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activities = activitiesData;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  fetchActivities,\n  incrementByAmount\n} = dashboardSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectActivities = state => state.activities.activities;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","activitiesData","dashboardSlice","name","initialState","activities","status","error","reducers","fetchActivities","state","incrementByAmount","action","value","payload","actions","selectActivities","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,OAAO,MAAMC,cAAc,GAAGF,WAAW,CAAC;AACxCG,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,MAAM,EAAE,MAFI;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAEC,KAAK,IAAI;AACxB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACL,UAAN,GAAmBJ,cAAnB;AACD,KAPO;AAQRU,IAAAA,iBAAiB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACG,KAAN,IAAeD,MAAM,CAACE,OAAtB;AACD;AAVO;AAP8B,CAAD,CAAlC;AAqBP,OAAO,MAAM;AAAEL,EAAAA,eAAF;AAAmBE,EAAAA;AAAnB,IAAyCT,cAAc,CAACa,OAA9D,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGN,KAAK,IAAIA,KAAK,CAACL,UAAN,CAAiBA,UAAnD;AAEP,eAAeH,cAAc,CAACe,OAA9B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { activitiesData } from \"./dashboardData\";\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    fetchActivities: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activities = activitiesData;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\n\nexport const { fetchActivities, incrementByAmount } = dashboardSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectActivities = state => state.activities.activities;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}