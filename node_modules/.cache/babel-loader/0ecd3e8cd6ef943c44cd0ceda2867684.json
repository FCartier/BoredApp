{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\nexport const fetchActivities = createAsyncThunk(\"dashboard/fetchActivities\", async () => {\n  const response = await get(\"/list\");\n  return response;\n});\nexport const fetchActivitiesByType = createAsyncThunk(\"dashboard/fetchActivitiesByType\", async type => {\n  const response = await get(`?type=${type}`);\n  return response;\n});\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    search: (state, action) => {\n      state.activities = action.payload;\n    },\n    updateActivities: (state, action) => {\n      state.activities = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    },\n    [fetchActivitiesByType.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivitiesByType.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = action.payload;\n    },\n    [fetchActivitiesByType.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  incrementByAmount\n} = dashboardSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectActivities = state => state.dashboard.activities;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","createAsyncThunk","get","StatusEnum","idle","loading","succeeded","failed","fetchActivities","response","fetchActivitiesByType","type","dashboardSlice","name","initialState","activities","status","error","reducers","search","state","action","payload","updateActivities","extraReducers","pending","fulfilled","concat","rejected","message","incrementByAmount","actions","selectActivities","dashboard","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\n\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\n\nexport const fetchActivities = createAsyncThunk(\n  \"dashboard/fetchActivities\",\n  async () => {\n    const response = await get(\"/list\");\n    return response;\n  }\n);\n\nexport const fetchActivitiesByType = createAsyncThunk(\n  \"dashboard/fetchActivitiesByType\",\n  async type => {\n    const response = await get(`?type=${type}`);\n    return response;\n  }\n);\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    status: StatusEnum.idle,\n    error: null\n  },\n  reducers: {\n    search: (state, action) => {\n      state.activities = action.payload;\n    },\n    updateActivities: (state, action) => {\n      state.activities = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = state.activities.concat(action.payload);\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    },\n    [fetchActivitiesByType.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivitiesByType.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = action.payload;\n    },\n    [fetchActivitiesByType.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\n\nexport const { incrementByAmount } = dashboardSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectActivities = state => state.dashboard.activities;\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}