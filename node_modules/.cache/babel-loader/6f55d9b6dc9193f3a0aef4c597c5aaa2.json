{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n}; // Thunk action creators\n\nexport const fetchActivities = createAsyncThunk(\"dashboard/fetchActivities\", async () => {\n  const response = await get(\"/list\");\n  return response;\n});\nexport const fetchActivitiesByType = createAsyncThunk(\"dashboard/fetchActivitiesByType\", async type => {\n  const response = await get(`?type=${type}`);\n  return response;\n}); // Slice\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    searchedValue: null,\n    status: StatusEnum.idle,\n    error: null\n  },\n  // Dashboard reducers\n  reducers: {\n    setSearchedValue: (state, action) => {\n      if (action.payload === \"\") {\n        state.searchedValue = null;\n      }\n\n      state.searchedValue = action.payload;\n    }\n  },\n  // Thunk reducers\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = action.payload;\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n}); // Actions\n\nexport const {\n  search\n} = dashboardSlice.actions; // Selectors\n\nexport const selectActivities = state => {\n  const {\n    activities,\n    searchedValue\n  } = state;\n\n  if (searchedValue) {\n    return state.activities.filter(activity => activity.activity.includes(query) || activity.type.includes(query));\n  }\n\n  return activities;\n};\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","createAsyncThunk","get","StatusEnum","idle","loading","succeeded","failed","fetchActivities","response","fetchActivitiesByType","type","dashboardSlice","name","initialState","activities","searchedValue","status","error","reducers","setSearchedValue","state","action","payload","extraReducers","pending","fulfilled","rejected","message","search","actions","selectActivities","filter","activity","includes","query","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,OAAO,EAAE,SAFQ;AAGjBC,EAAAA,SAAS,EAAE,WAHM;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB,C,CAOA;;AACA,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAC7C,2BAD6C,EAE7C,YAAY;AACV,QAAMQ,QAAQ,GAAG,MAAMP,GAAG,CAAC,OAAD,CAA1B;AACA,SAAOO,QAAP;AACD,CAL4C,CAAxC;AAQP,OAAO,MAAMC,qBAAqB,GAAGT,gBAAgB,CACnD,iCADmD,EAEnD,MAAMU,IAAN,IAAc;AACZ,QAAMF,QAAQ,GAAG,MAAMP,GAAG,CAAE,SAAQS,IAAK,EAAf,CAA1B;AACA,SAAOF,QAAP;AACD,CALkD,CAA9C,C,CAQP;;AACA,OAAO,MAAMG,cAAc,GAAGZ,WAAW,CAAC;AACxCa,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,aAAa,EAAE,IAFH;AAGZC,IAAAA,MAAM,EAAEd,UAAU,CAACC,IAHP;AAIZc,IAAAA,KAAK,EAAE;AAJK,GAF0B;AAQxC;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAIA,MAAM,CAACC,OAAP,KAAmB,EAAvB,EAA2B;AACzBF,QAAAA,KAAK,CAACL,aAAN,GAAsB,IAAtB;AACD;;AACDK,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACC,OAA7B;AACD;AANO,GAT8B;AAiBxC;AACAC,EAAAA,aAAa,EAAE;AACb,KAAChB,eAAe,CAACiB,OAAjB,GAA2B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACT,eAAe,CAACkB,SAAjB,GAA6B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACC,OAA1B;AACD,KAPY;AAQb,KAACf,eAAe,CAACmB,QAAjB,GAA4B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAaU,OAA3B;AACD;AAXY;AAlByB,CAAD,CAAlC,C,CAiCP;;AACA,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAajB,cAAc,CAACkB,OAAlC,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAGV,KAAK,IAAI;AACvC,QAAM;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCK,KAAtC;;AACA,MAAIL,aAAJ,EAAmB;AACjB,WAAOK,KAAK,CAACN,UAAN,CAAiBiB,MAAjB,CACLC,QAAQ,IACNA,QAAQ,CAACA,QAAT,CAAkBC,QAAlB,CAA2BC,KAA3B,KAAqCF,QAAQ,CAACtB,IAAT,CAAcuB,QAAd,CAAuBC,KAAvB,CAFlC,CAAP;AAID;;AACD,SAAOpB,UAAP;AACD,CATM;AAWP,eAAeH,cAAc,CAACwB,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\n\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\n\n// Thunk action creators\nexport const fetchActivities = createAsyncThunk(\n  \"dashboard/fetchActivities\",\n  async () => {\n    const response = await get(\"/list\");\n    return response;\n  }\n);\n\nexport const fetchActivitiesByType = createAsyncThunk(\n  \"dashboard/fetchActivitiesByType\",\n  async type => {\n    const response = await get(`?type=${type}`);\n    return response;\n  }\n);\n\n// Slice\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    searchedValue: null,\n    status: StatusEnum.idle,\n    error: null\n  },\n  // Dashboard reducers\n  reducers: {\n    setSearchedValue: (state, action) => {\n      if (action.payload === \"\") {\n        state.searchedValue = null;\n      }\n      state.searchedValue = action.payload;\n    }\n  },\n  // Thunk reducers\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.activities = action.payload;\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }\n  }\n});\n\n// Actions\nexport const { search } = dashboardSlice.actions;\n\n// Selectors\nexport const selectActivities = state => {\n  const { activities, searchedValue } = state;\n  if (searchedValue) {\n    return state.activities.filter(\n      activity =>\n        activity.activity.includes(query) || activity.type.includes(query)\n    );\n  }\n  return activities;\n};\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}