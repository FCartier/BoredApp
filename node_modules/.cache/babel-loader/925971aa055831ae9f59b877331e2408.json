{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n}; // Thunk action creators\n\nexport const fetchActivities = createAsyncThunk(\"dashboard/fetchActivities\", async () => {\n  const response = await get(\"/list\");\n  return response;\n});\nexport const fetchActivity = createAsyncThunk(\"dashboard/fetchActivity\", async () => {\n  const response = await get(\"\");\n  return response;\n}); // Slice\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    searchedValue: null,\n    status: StatusEnum.idle,\n    error: null\n  },\n  // Dashboard reducers\n  reducers: {\n    setSearchedValue: (state, action) => {\n      state.searchedValue = action.payload;\n    }\n  },\n  // Thunk reducers\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = StatusEnum.loading;\n      state.searchedValue = null;\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = StatusEnum.succeeded;\n      state.activities = action.payload;\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = StatusEnum.failed;\n      state.error = action.error.message;\n    }\n  }\n}); // Actions\n\nexport const {\n  setSearchedValue\n} = dashboardSlice.actions; // Selectors\n\nexport const selectActivities = state => {\n  const {\n    dashboard: {\n      activities,\n      searchedValue\n    }\n  } = state;\n\n  if (searchedValue) {\n    const tmp = activities.filter(activity => activity.activity.includes(searchedValue) || activity.type.includes(searchedValue));\n    return tmp;\n  }\n\n  return activities;\n};\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["/Users/F.Cartier/workspace/PushGround/client/client/src/features/dashboard/dashboardSlice.js"],"names":["createSlice","createAsyncThunk","get","StatusEnum","idle","loading","succeeded","failed","fetchActivities","response","fetchActivity","dashboardSlice","name","initialState","activities","searchedValue","status","error","reducers","setSearchedValue","state","action","payload","extraReducers","pending","fulfilled","rejected","message","actions","selectActivities","dashboard","tmp","filter","activity","includes","type","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,OAAO,EAAE,SAFQ;AAGjBC,EAAAA,SAAS,EAAE,WAHM;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB,C,CAOA;;AACA,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAC7C,2BAD6C,EAE7C,YAAY;AACV,QAAMQ,QAAQ,GAAG,MAAMP,GAAG,CAAC,OAAD,CAA1B;AACA,SAAOO,QAAP;AACD,CAL4C,CAAxC;AAQP,OAAO,MAAMC,aAAa,GAAGT,gBAAgB,CAC3C,yBAD2C,EAE3C,YAAY;AACV,QAAMQ,QAAQ,GAAG,MAAMP,GAAG,CAAC,EAAD,CAA1B;AACA,SAAOO,QAAP;AACD,CAL0C,CAAtC,C,CAQP;;AACA,OAAO,MAAME,cAAc,GAAGX,WAAW,CAAC;AACxCY,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,aAAa,EAAE,IAFH;AAGZC,IAAAA,MAAM,EAAEb,UAAU,CAACC,IAHP;AAIZa,IAAAA,KAAK,EAAE;AAJK,GAF0B;AAQxC;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACC,OAA7B;AACD;AAHO,GAT8B;AAcxC;AACAC,EAAAA,aAAa,EAAE;AACb,KAACf,eAAe,CAACgB,OAAjB,GAA2B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,MAAN,GAAeb,UAAU,CAACE,OAA1B;AACAe,MAAAA,KAAK,CAACL,aAAN,GAAsB,IAAtB;AACD,KAJY;AAKb,KAACP,eAAe,CAACiB,SAAjB,GAA6B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACJ,MAAN,GAAeb,UAAU,CAACG,SAA1B;AACAc,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACC,OAA1B;AACD,KARY;AASb,KAACd,eAAe,CAACkB,QAAjB,GAA4B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,MAAN,GAAeb,UAAU,CAACI,MAA1B;AACAa,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAaU,OAA3B;AACD;AAZY;AAfyB,CAAD,CAAlC,C,CA+BP;;AACA,OAAO,MAAM;AAAER,EAAAA;AAAF,IAAuBR,cAAc,CAACiB,OAA5C,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAGT,KAAK,IAAI;AACvC,QAAM;AACJU,IAAAA,SAAS,EAAE;AAAEhB,MAAAA,UAAF;AAAcC,MAAAA;AAAd;AADP,MAEFK,KAFJ;;AAGA,MAAIL,aAAJ,EAAmB;AACjB,UAAMgB,GAAG,GAAGjB,UAAU,CAACkB,MAAX,CACVC,QAAQ,IACNA,QAAQ,CAACA,QAAT,CAAkBC,QAAlB,CAA2BnB,aAA3B,KACAkB,QAAQ,CAACE,IAAT,CAAcD,QAAd,CAAuBnB,aAAvB,CAHQ,CAAZ;AAKA,WAAOgB,GAAP;AACD;;AACD,SAAOjB,UAAP;AACD,CAbM;AAeP,eAAeH,cAAc,CAACyB,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { get } from \"../../api/client\";\n\nconst StatusEnum = {\n  idle: \"idle\",\n  loading: \"loading\",\n  succeeded: \"succeeded\",\n  failed: \"failed\"\n};\n\n// Thunk action creators\nexport const fetchActivities = createAsyncThunk(\n  \"dashboard/fetchActivities\",\n  async () => {\n    const response = await get(\"/list\");\n    return response;\n  }\n);\n\nexport const fetchActivity = createAsyncThunk(\n  \"dashboard/fetchActivity\",\n  async () => {\n    const response = await get(\"\");\n    return response;\n  }\n);\n\n// Slice\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    activities: [],\n    searchedValue: null,\n    status: StatusEnum.idle,\n    error: null\n  },\n  // Dashboard reducers\n  reducers: {\n    setSearchedValue: (state, action) => {\n      state.searchedValue = action.payload;\n    }\n  },\n  // Thunk reducers\n  extraReducers: {\n    [fetchActivities.pending]: (state, action) => {\n      state.status = StatusEnum.loading;\n      state.searchedValue = null;\n    },\n    [fetchActivities.fulfilled]: (state, action) => {\n      state.status = StatusEnum.succeeded;\n      state.activities = action.payload;\n    },\n    [fetchActivities.rejected]: (state, action) => {\n      state.status = StatusEnum.failed;\n      state.error = action.error.message;\n    }\n  }\n});\n\n// Actions\nexport const { setSearchedValue } = dashboardSlice.actions;\n\n// Selectors\nexport const selectActivities = state => {\n  const {\n    dashboard: { activities, searchedValue }\n  } = state;\n  if (searchedValue) {\n    const tmp = activities.filter(\n      activity =>\n        activity.activity.includes(searchedValue) ||\n        activity.type.includes(searchedValue)\n    );\n    return tmp;\n  }\n  return activities;\n};\n\nexport default dashboardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}